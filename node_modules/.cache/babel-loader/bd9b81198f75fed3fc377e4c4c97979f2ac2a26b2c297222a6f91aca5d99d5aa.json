{"ast":null,"code":"class e {\n  constructor(a, b, c, d, f) {\n    this._legacyCanvasSize = e.DEFAULT_CANVAS_SIZE;\n    this._preferredCamera = \"environment\";\n    this._maxScansPerSecond = 25;\n    this._lastScanTimestamp = -1;\n    this._destroyed = this._flashOn = this._paused = this._active = !1;\n    this.$video = a;\n    this.$canvas = document.createElement(\"canvas\");\n    c && \"object\" === typeof c ? this._onDecode = b : (c || d || f ? console.warn(\"You're using a deprecated version of the QrScanner constructor which will be removed in the future\") : console.warn(\"Note that the type of the scan result passed to onDecode will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true.\"), this._legacyOnDecode = b);\n    b = \"object\" === typeof c ? c : {};\n    this._onDecodeError = b.onDecodeError || (\"function\" === typeof c ? c : this._onDecodeError);\n    this._calculateScanRegion = b.calculateScanRegion || (\"function\" === typeof d ? d : this._calculateScanRegion);\n    this._preferredCamera = b.preferredCamera || f || this._preferredCamera;\n    this._legacyCanvasSize = \"number\" === typeof c ? c : \"number\" === typeof d ? d : this._legacyCanvasSize;\n    this._maxScansPerSecond = b.maxScansPerSecond || this._maxScansPerSecond;\n    this._onPlay = this._onPlay.bind(this);\n    this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n    this._onVisibilityChange = this._onVisibilityChange.bind(this);\n    this._updateOverlay = this._updateOverlay.bind(this);\n    a.disablePictureInPicture = !0;\n    a.playsInline = !0;\n    a.muted = !0;\n    let h = !1;\n    a.hidden && (a.hidden = !1, h = !0);\n    document.body.contains(a) || (document.body.appendChild(a), h = !0);\n    c = a.parentElement;\n    if (b.highlightScanRegion || b.highlightCodeOutline) {\n      d = !!b.overlay;\n      this.$overlay = b.overlay || document.createElement(\"div\");\n      f = this.$overlay.style;\n      f.position = \"absolute\";\n      f.display = \"none\";\n      f.pointerEvents = \"none\";\n      this.$overlay.classList.add(\"scan-region-highlight\");\n      if (!d && b.highlightScanRegion) {\n        this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\"><path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n        try {\n          this.$overlay.firstElementChild.animate({\n            transform: [\"scale(.98)\", \"scale(1.01)\"]\n          }, {\n            duration: 400,\n            iterations: Infinity,\n            direction: \"alternate\",\n            easing: \"ease-in-out\"\n          });\n        } catch (m) {}\n        c.insertBefore(this.$overlay, this.$video.nextSibling);\n      }\n      b.highlightCodeOutline && (this.$overlay.insertAdjacentHTML(\"beforeend\", '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>'), this.$codeOutlineHighlight = this.$overlay.lastElementChild);\n    }\n    this._scanRegion = this._calculateScanRegion(a);\n    requestAnimationFrame(() => {\n      let m = window.getComputedStyle(a);\n      \"none\" === m.display && (a.style.setProperty(\"display\", \"block\", \"important\"), h = !0);\n      \"visible\" !== m.visibility && (a.style.setProperty(\"visibility\", \"visible\", \"important\"), h = !0);\n      h && (console.warn(\"QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.\"), a.style.opacity = \"0\", a.style.width = \"0\", a.style.height = \"0\", this.$overlay && this.$overlay.parentElement && this.$overlay.parentElement.removeChild(this.$overlay), delete this.$overlay, delete this.$codeOutlineHighlight);\n      this.$overlay && this._updateOverlay();\n    });\n    a.addEventListener(\"play\", this._onPlay);\n    a.addEventListener(\"loadedmetadata\", this._onLoadedMetaData);\n    document.addEventListener(\"visibilitychange\", this._onVisibilityChange);\n    window.addEventListener(\"resize\", this._updateOverlay);\n    this._qrEnginePromise = e.createQrEngine();\n  }\n  static set WORKER_PATH(a) {\n    console.warn(\"Setting QrScanner.WORKER_PATH is not required and not supported anymore. Have a look at the README for new setup instructions.\");\n  }\n  static async hasCamera() {\n    try {\n      return !!(await e.listCameras(!1)).length;\n    } catch (a) {\n      return !1;\n    }\n  }\n  static async listCameras() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n    if (!navigator.mediaDevices) return [];\n    let b = async () => (await navigator.mediaDevices.enumerateDevices()).filter(d => \"videoinput\" === d.kind),\n      c;\n    try {\n      a && (await b()).every(d => !d.label) && (c = await navigator.mediaDevices.getUserMedia({\n        audio: !1,\n        video: !0\n      }));\n    } catch (d) {}\n    try {\n      return (await b()).map((d, f) => ({\n        id: d.deviceId,\n        label: d.label || (0 === f ? \"Default Camera\" : `Camera ${f + 1}`)\n      }));\n    } finally {\n      c && (console.warn(\"Call listCameras after successfully starting a QR scanner to avoid creating a temporary video stream\"), e._stopVideoStream(c));\n    }\n  }\n  async hasFlash() {\n    let a;\n    try {\n      if (this.$video.srcObject) {\n        if (!(this.$video.srcObject instanceof MediaStream)) return !1;\n        a = this.$video.srcObject;\n      } else a = (await this._getCameraStream()).stream;\n      return \"torch\" in a.getVideoTracks()[0].getSettings();\n    } catch (b) {\n      return !1;\n    } finally {\n      a && a !== this.$video.srcObject && (console.warn(\"Call hasFlash after successfully starting the scanner to avoid creating a temporary video stream\"), e._stopVideoStream(a));\n    }\n  }\n  isFlashOn() {\n    return this._flashOn;\n  }\n  async toggleFlash() {\n    this._flashOn ? await this.turnFlashOff() : await this.turnFlashOn();\n  }\n  async turnFlashOn() {\n    if (!this._flashOn && !this._destroyed && (this._flashOn = !0, this._active && !this._paused)) try {\n      if (!(await this.hasFlash())) throw \"No flash available\";\n      await this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n        advanced: [{\n          torch: !0\n        }]\n      });\n    } catch (a) {\n      throw this._flashOn = !1, a;\n    }\n  }\n  async turnFlashOff() {\n    this._flashOn && (this._flashOn = !1, await this._restartVideoStream());\n  }\n  destroy() {\n    this.$video.removeEventListener(\"loadedmetadata\", this._onLoadedMetaData);\n    this.$video.removeEventListener(\"play\", this._onPlay);\n    document.removeEventListener(\"visibilitychange\", this._onVisibilityChange);\n    window.removeEventListener(\"resize\", this._updateOverlay);\n    this._destroyed = !0;\n    this._flashOn = !1;\n    this.stop();\n    e._postWorkerMessage(this._qrEnginePromise, \"close\");\n  }\n  async start() {\n    if (this._destroyed) throw Error(\"The QR scanner can not be started as it had been destroyed.\");\n    if (!this._active || this._paused) if (\"https:\" !== window.location.protocol && console.warn(\"The camera stream is only accessible if the page is transferred via https.\"), this._active = !0, !document.hidden) if (this._paused = !1, this.$video.srcObject) await this.$video.play();else try {\n      let {\n        stream: a,\n        facingMode: b\n      } = await this._getCameraStream();\n      !this._active || this._paused ? e._stopVideoStream(a) : (this._setVideoMirror(b), this.$video.srcObject = a, await this.$video.play(), this._flashOn && (this._flashOn = !1, this.turnFlashOn().catch(() => {})));\n    } catch (a) {\n      if (!this._paused) throw this._active = !1, a;\n    }\n  }\n  stop() {\n    this.pause();\n    this._active = !1;\n  }\n  async pause() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n    this._paused = !0;\n    if (!this._active) return !0;\n    this.$video.pause();\n    this.$overlay && (this.$overlay.style.display = \"none\");\n    let b = () => {\n      this.$video.srcObject instanceof MediaStream && (e._stopVideoStream(this.$video.srcObject), this.$video.srcObject = null);\n    };\n    if (a) return b(), !0;\n    await new Promise(c => setTimeout(c, 300));\n    if (!this._paused) return !1;\n    b();\n    return !0;\n  }\n  async setCamera(a) {\n    a !== this._preferredCamera && (this._preferredCamera = a, await this._restartVideoStream());\n  }\n  static async scanImage(a, b, c, d) {\n    let f = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;\n    let h = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;\n    let m,\n      n = !1;\n    b && (\"scanRegion\" in b || \"qrEngine\" in b || \"canvas\" in b || \"disallowCanvasResizing\" in b || \"alsoTryWithoutScanRegion\" in b || \"returnDetailedScanResult\" in b) ? (m = b.scanRegion, c = b.qrEngine, d = b.canvas, f = b.disallowCanvasResizing || !1, h = b.alsoTryWithoutScanRegion || !1, n = !0) : b || c || d || f || h ? console.warn(\"You're using a deprecated api for scanImage which will be removed in the future.\") : console.warn(\"Note that the return type of scanImage will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true.\");\n    b = !!c;\n    try {\n      let p, k;\n      [c, p] = await Promise.all([c || e.createQrEngine(), e._loadImage(a)]);\n      [d, k] = e._drawToCanvas(p, m, d, f);\n      let q;\n      if (c instanceof Worker) {\n        let g = c;\n        b || e._postWorkerMessageSync(g, \"inversionMode\", \"both\");\n        q = await new Promise((l, v) => {\n          let w,\n            u,\n            r,\n            y = -1;\n          u = t => {\n            t.data.id === y && (g.removeEventListener(\"message\", u), g.removeEventListener(\"error\", r), clearTimeout(w), null !== t.data.data ? l({\n              data: t.data.data,\n              cornerPoints: e._convertPoints(t.data.cornerPoints, m)\n            }) : v(e.NO_QR_CODE_FOUND));\n          };\n          r = t => {\n            g.removeEventListener(\"message\", u);\n            g.removeEventListener(\"error\", r);\n            clearTimeout(w);\n            v(\"Scanner error: \" + (t ? t.message || t : \"Unknown Error\"));\n          };\n          g.addEventListener(\"message\", u);\n          g.addEventListener(\"error\", r);\n          w = setTimeout(() => r(\"timeout\"), 1E4);\n          let x = k.getImageData(0, 0, d.width, d.height);\n          y = e._postWorkerMessageSync(g, \"decode\", x, [x.data.buffer]);\n        });\n      } else q = await Promise.race([new Promise((g, l) => window.setTimeout(() => l(\"Scanner error: timeout\"), 1E4)), (async () => {\n        try {\n          var [g] = await c.detect(d);\n          if (!g) throw e.NO_QR_CODE_FOUND;\n          return {\n            data: g.rawValue,\n            cornerPoints: e._convertPoints(g.cornerPoints, m)\n          };\n        } catch (l) {\n          g = l.message || l;\n          if (/not implemented|service unavailable/.test(g)) return e._disableBarcodeDetector = !0, e.scanImage(a, {\n            scanRegion: m,\n            canvas: d,\n            disallowCanvasResizing: f,\n            alsoTryWithoutScanRegion: h\n          });\n          throw `Scanner error: ${g}`;\n        }\n      })()]);\n      return n ? q : q.data;\n    } catch (p) {\n      if (!m || !h) throw p;\n      let k = await e.scanImage(a, {\n        qrEngine: c,\n        canvas: d,\n        disallowCanvasResizing: f\n      });\n      return n ? k : k.data;\n    } finally {\n      b || e._postWorkerMessage(c, \"close\");\n    }\n  }\n  setGrayscaleWeights(a, b, c) {\n    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;\n    e._postWorkerMessage(this._qrEnginePromise, \"grayscaleWeights\", {\n      red: a,\n      green: b,\n      blue: c,\n      useIntegerApproximation: d\n    });\n  }\n  setInversionMode(a) {\n    e._postWorkerMessage(this._qrEnginePromise, \"inversionMode\", a);\n  }\n  static async createQrEngine(a) {\n    a && console.warn(\"Specifying a worker path is not required and not supported anymore.\");\n    a = () => import(\"./qr-scanner-worker.min.js\").then(c => c.createWorker());\n    if (!(!e._disableBarcodeDetector && \"BarcodeDetector\" in window && BarcodeDetector.getSupportedFormats && (await BarcodeDetector.getSupportedFormats()).includes(\"qr_code\"))) return a();\n    let b = navigator.userAgentData;\n    return b && b.brands.some(_ref => {\n      let {\n        brand: c\n      } = _ref;\n      return /Chromium/i.test(c);\n    }) && /mac ?OS/i.test(b.platform) && (await b.getHighEntropyValues([\"architecture\", \"platformVersion\"]).then(_ref2 => {\n      let {\n        architecture: c,\n        platformVersion: d\n      } = _ref2;\n      return /arm/i.test(c || \"arm\") && 13 <= parseInt(d || \"13\");\n    }).catch(() => !0)) ? a() : new BarcodeDetector({\n      formats: [\"qr_code\"]\n    });\n  }\n  _onPlay() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n    this._updateOverlay();\n    this.$overlay && (this.$overlay.style.display = \"\");\n    this._scanFrame();\n  }\n  _onLoadedMetaData() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n    this._updateOverlay();\n  }\n  _onVisibilityChange() {\n    document.hidden ? this.pause() : this._active && this.start();\n  }\n  _calculateScanRegion(a) {\n    let b = Math.round(2 / 3 * Math.min(a.videoWidth, a.videoHeight));\n    return {\n      x: Math.round((a.videoWidth - b) / 2),\n      y: Math.round((a.videoHeight - b) / 2),\n      width: b,\n      height: b,\n      downScaledWidth: this._legacyCanvasSize,\n      downScaledHeight: this._legacyCanvasSize\n    };\n  }\n  _updateOverlay() {\n    requestAnimationFrame(() => {\n      if (this.$overlay) {\n        var a = this.$video,\n          b = a.videoWidth,\n          c = a.videoHeight,\n          d = a.offsetWidth,\n          f = a.offsetHeight,\n          h = a.offsetLeft,\n          m = a.offsetTop,\n          n = window.getComputedStyle(a),\n          p = n.objectFit,\n          k = b / c,\n          q = d / f;\n        switch (p) {\n          case \"none\":\n            var g = b;\n            var l = c;\n            break;\n          case \"fill\":\n            g = d;\n            l = f;\n            break;\n          default:\n            (\"cover\" === p ? k > q : k < q) ? (l = f, g = l * k) : (g = d, l = g / k), \"scale-down\" === p && (g = Math.min(g, b), l = Math.min(l, c));\n        }\n        var [v, w] = n.objectPosition.split(\" \").map((r, y) => {\n          const x = parseFloat(r);\n          return r.endsWith(\"%\") ? (y ? f - l : d - g) * x / 100 : x;\n        });\n        n = this._scanRegion.width || b;\n        q = this._scanRegion.height || c;\n        p = this._scanRegion.x || 0;\n        var u = this._scanRegion.y || 0;\n        k = this.$overlay.style;\n        k.width = `${n / b * g}px`;\n        k.height = `${q / c * l}px`;\n        k.top = `${m + w + u / c * l}px`;\n        c = /scaleX\\(-1\\)/.test(a.style.transform);\n        k.left = `${h + (c ? d - v - g : v) + (c ? b - p - n : p) / b * g}px`;\n        k.transform = a.style.transform;\n      }\n    });\n  }\n  static _convertPoints(a, b) {\n    if (!b) return a;\n    let c = b.x || 0,\n      d = b.y || 0,\n      f = b.width && b.downScaledWidth ? b.width / b.downScaledWidth : 1;\n    b = b.height && b.downScaledHeight ? b.height / b.downScaledHeight : 1;\n    for (let h of a) h.x = h.x * f + c, h.y = h.y * b + d;\n    return a;\n  }\n  _scanFrame() {\n    !this._active || this.$video.paused || this.$video.ended || (\"requestVideoFrameCallback\" in this.$video ? this.$video.requestVideoFrameCallback.bind(this.$video) : requestAnimationFrame)(async () => {\n      if (!(1 >= this.$video.readyState)) {\n        var a = Date.now() - this._lastScanTimestamp,\n          b = 1E3 / this._maxScansPerSecond;\n        a < b && (await new Promise(d => setTimeout(d, b - a)));\n        this._lastScanTimestamp = Date.now();\n        try {\n          var c = await e.scanImage(this.$video, {\n            scanRegion: this._scanRegion,\n            qrEngine: this._qrEnginePromise,\n            canvas: this.$canvas\n          });\n        } catch (d) {\n          if (!this._active) return;\n          this._onDecodeError(d);\n        }\n        !e._disableBarcodeDetector || (await this._qrEnginePromise) instanceof Worker || (this._qrEnginePromise = e.createQrEngine());\n        c ? (this._onDecode ? this._onDecode(c) : this._legacyOnDecode && this._legacyOnDecode(c.data), this.$codeOutlineHighlight && (clearTimeout(this._codeOutlineHighlightRemovalTimeout), this._codeOutlineHighlightRemovalTimeout = void 0, this.$codeOutlineHighlight.setAttribute(\"viewBox\", `${this._scanRegion.x || 0} ` + `${this._scanRegion.y || 0} ` + `${this._scanRegion.width || this.$video.videoWidth} ` + `${this._scanRegion.height || this.$video.videoHeight}`), this.$codeOutlineHighlight.firstElementChild.setAttribute(\"points\", c.cornerPoints.map(_ref3 => {\n          let {\n            x: d,\n            y: f\n          } = _ref3;\n          return `${d},${f}`;\n        }).join(\" \")), this.$codeOutlineHighlight.style.display = \"\")) : this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout && (this._codeOutlineHighlightRemovalTimeout = setTimeout(() => this.$codeOutlineHighlight.style.display = \"none\", 100));\n      }\n      this._scanFrame();\n    });\n  }\n  _onDecodeError(a) {\n    a !== e.NO_QR_CODE_FOUND && console.log(a);\n  }\n  async _getCameraStream() {\n    if (!navigator.mediaDevices) throw \"Camera not found.\";\n    let a = /^(environment|user)$/.test(this._preferredCamera) ? \"facingMode\" : \"deviceId\",\n      b = [{\n        width: {\n          min: 1024\n        }\n      }, {\n        width: {\n          min: 768\n        }\n      }, {}],\n      c = b.map(d => Object.assign({}, d, {\n        [a]: {\n          exact: this._preferredCamera\n        }\n      }));\n    for (let d of [...c, ...b]) try {\n      let f = await navigator.mediaDevices.getUserMedia({\n          video: d,\n          audio: !1\n        }),\n        h = this._getFacingMode(f) || (d.facingMode ? this._preferredCamera : \"environment\" === this._preferredCamera ? \"user\" : \"environment\");\n      return {\n        stream: f,\n        facingMode: h\n      };\n    } catch (f) {}\n    throw \"Camera not found.\";\n  }\n  async _restartVideoStream() {\n    let a = this._paused;\n    (await this.pause(!0)) && !a && this._active && (await this.start());\n  }\n  static _stopVideoStream(a) {\n    for (let b of a.getTracks()) b.stop(), a.removeTrack(b);\n  }\n  _setVideoMirror(a) {\n    this.$video.style.transform = \"scaleX(\" + (\"user\" === a ? -1 : 1) + \")\";\n  }\n  _getFacingMode(a) {\n    return (a = a.getVideoTracks()[0]) ? /rear|back|environment/i.test(a.label) ? \"environment\" : /front|user|face/i.test(a.label) ? \"user\" : null : null;\n  }\n  static _drawToCanvas(a, b, c) {\n    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n    c = c || document.createElement(\"canvas\");\n    let f = b && b.x ? b.x : 0,\n      h = b && b.y ? b.y : 0,\n      m = b && b.width ? b.width : a.videoWidth || a.width,\n      n = b && b.height ? b.height : a.videoHeight || a.height;\n    d || (d = b && b.downScaledWidth ? b.downScaledWidth : m, b = b && b.downScaledHeight ? b.downScaledHeight : n, c.width !== d && (c.width = d), c.height !== b && (c.height = b));\n    b = c.getContext(\"2d\", {\n      alpha: !1\n    });\n    b.imageSmoothingEnabled = !1;\n    b.drawImage(a, f, h, m, n, 0, 0, c.width, c.height);\n    return [c, b];\n  }\n  static async _loadImage(a) {\n    if (a instanceof Image) return await e._awaitImageLoad(a), a;\n    if (a instanceof HTMLVideoElement || a instanceof HTMLCanvasElement || a instanceof SVGImageElement || \"OffscreenCanvas\" in window && a instanceof OffscreenCanvas || \"ImageBitmap\" in window && a instanceof ImageBitmap) return a;\n    if (a instanceof File || a instanceof Blob || a instanceof URL || \"string\" === typeof a) {\n      let b = new Image();\n      b.src = a instanceof File || a instanceof Blob ? URL.createObjectURL(a) : a.toString();\n      try {\n        return await e._awaitImageLoad(b), b;\n      } finally {\n        (a instanceof File || a instanceof Blob) && URL.revokeObjectURL(b.src);\n      }\n    } else throw \"Unsupported image type.\";\n  }\n  static async _awaitImageLoad(a) {\n    a.complete && 0 !== a.naturalWidth || (await new Promise((b, c) => {\n      let d = f => {\n        a.removeEventListener(\"load\", d);\n        a.removeEventListener(\"error\", d);\n        f instanceof ErrorEvent ? c(\"Image load error\") : b();\n      };\n      a.addEventListener(\"load\", d);\n      a.addEventListener(\"error\", d);\n    }));\n  }\n  static async _postWorkerMessage(a, b, c, d) {\n    return e._postWorkerMessageSync(await a, b, c, d);\n  }\n  static _postWorkerMessageSync(a, b, c, d) {\n    if (!(a instanceof Worker)) return -1;\n    let f = e._workerMessageId++;\n    a.postMessage({\n      id: f,\n      type: b,\n      data: c\n    }, d);\n    return f;\n  }\n}\ne.DEFAULT_CANVAS_SIZE = 400;\ne.NO_QR_CODE_FOUND = \"No QR code found\";\ne._disableBarcodeDetector = !1;\ne._workerMessageId = 0;\nexport default e;","map":{"version":3,"mappings":"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","names":["QrScanner","a","constructor","onDecode","DEFAULT_CANVAS_SIZE","$video","$canvas","createElement","c","_onDecode","canvasSizeOrCalculateScanRegion","console","_legacyOnDecode","b","canvasSizeOrOnDecodeErrorOrOptions","_onDecodeError","options","onDecodeError","_calculateScanRegion","calculateScanRegion","_preferredCamera","preferredCamera","_legacyCanvasSize","_maxScansPerSecond","maxScansPerSecond","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","_updateOverlay","video","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","document","body","contains","appendChild","highlightScanRegion","highlightCodeOutline","d","$overlay","overlay","f","overlayStyle","position","display","pointerEvents","classList","add","gotExternalOverlay","innerHTML","firstElementChild","animate","transform","duration","iterations","Infinity","direction","easing","e","videoContainer","insertBefore","nextSibling","insertAdjacentHTML","$codeOutlineHighlight","lastElementChild","_scanRegion","requestAnimationFrame","videoStyle","style","setProperty","visibility","warn","opacity","width","height","parentElement","removeChild","addEventListener","window","_qrEnginePromise","createQrEngine","workerPath","hasCamera","length","listCameras","requestLabels","navigator","mediaDevices","filter","device","openedStream","every","enumerateCameras","camera","label","getUserMedia","audio","map","i","id","deviceId","_stopVideoStream","hasFlash","stream","srcObject","MediaStream","_getCameraStream","getVideoTracks","getSettings","isFlashOn","_flashOn","toggleFlash","turnFlashOff","turnFlashOn","_destroyed","_active","_paused","applyConstraints","advanced","torch","_restartVideoStream","destroy","removeEventListener","stop","_postWorkerMessage","start","Error","location","protocol","play","facingMode","_setVideoMirror","catch","pause","stopStreamImmediately","stopStream","Promise","resolve","setTimeout","setCamera","facingModeOrDeviceId","scanImage","imageOrFileOrBlobOrUrl","scanRegionOrOptions","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","scanRegion","returnDetailedScanResult","image","canvasContext","all","_loadImage","_drawToCanvas","detailedScanResult","Worker","gotExternalEngine","_postWorkerMessageSync","qrEngineWorker","reject","timeout","onMessage","onError","expectedResponseId","event","data","clearTimeout","cornerPoints","_convertPoints","NO_QR_CODE_FOUND","error","imageData","buffer","race","scanResult","rawValue","g","message","test","errorMessage","_disableBarcodeDetector","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","then","module","createWorker","BarcodeDetector","getSupportedFormats","includes","userAgentData","brands","some","brand","platform","getHighEntropyValues","architecture","platformVersion","parseInt","formats","_scanFrame","x","Math","round","videoWidth","scanRegionSize","y","videoHeight","downScaledWidth","downScaledHeight","h","n","p","k","q","videoObjectFit","videoScaledWidth","elementWidth","videoScaledHeight","elementHeight","videoAspectRatio","elementAspectRatio","min","videoY","lengthValue","parseFloat","endsWith","regionWidth","regionHeight","top","elementY","regionY","left","elementX","isVideoMirrored","videoX","regionX","points","point","scaleFactorX","offsetX","scaleFactorY","offsetY","paused","ended","requestVideoFrameCallback","readyState","timeSinceLastScan","minimumTimeBetweenScans","_lastScanTimestamp","Date","now","result","_codeOutlineHighlightRemovalTimeout","undefined","setAttribute","join","log","constraint","preferenceType","exact","constraints","wasPaused","track","removeTrack","_getFacingMode","videoStream","videoTrack","m","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","Image","_awaitImageLoad","HTMLVideoElement","HTMLCanvasElement","SVGImageElement","OffscreenCanvas","ImageBitmap","File","Blob","URL","src","createObjectURL","toString","revokeObjectURL","complete","naturalWidth","listener","ErrorEvent","qrEngineOrQrEnginePromise","type","transfer","postMessage"],"sources":["/Users/johnborillo/Desktop/chainlink/node_modules/qr-scanner/src/qr-scanner.ts"],"sourcesContent":["class QrScanner {\n    static readonly DEFAULT_CANVAS_SIZE = 400;\n    static readonly NO_QR_CODE_FOUND = 'No QR code found';\n    private static _disableBarcodeDetector = false;\n    private static _workerMessageId = 0;\n\n    /** @deprecated */\n    static set WORKER_PATH(workerPath: string) {\n        console.warn('Setting QrScanner.WORKER_PATH is not required and not supported anymore. '\n            + 'Have a look at the README for new setup instructions.');\n    }\n\n    static async hasCamera(): Promise<boolean> {\n        try {\n            return !!(await QrScanner.listCameras(false)).length;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static async listCameras(requestLabels = false): Promise<Array<QrScanner.Camera>> {\n        if (!navigator.mediaDevices) return [];\n\n        const enumerateCameras = async (): Promise<Array<MediaDeviceInfo>> =>\n            (await navigator.mediaDevices.enumerateDevices()).filter((device) => device.kind === 'videoinput');\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, if we're not getting labels but labels are requested\n        // ask for camera permission by opening a stream.\n        let openedStream: MediaStream | undefined;\n        try {\n            if (requestLabels && (await enumerateCameras()).every((camera) => !camera.label)) {\n                openedStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n        } catch (e) {\n            // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in use\n            // and some browsers disallow a second stream.\n        }\n\n        try {\n            return (await enumerateCameras()).map((camera, i) => ({\n                id: camera.deviceId,\n                label: camera.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            }));\n        } finally {\n            // close the stream we just opened for getting camera access for listing the device labels\n            if (openedStream) {\n                console.warn('Call listCameras after successfully starting a QR scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(openedStream);\n            }\n        }\n    }\n\n    readonly $video: HTMLVideoElement;\n    readonly $canvas: HTMLCanvasElement;\n    readonly $overlay?: HTMLDivElement;\n    private readonly $codeOutlineHighlight?: SVGSVGElement;\n    private readonly _onDecode?: (result: QrScanner.ScanResult) => void;\n    private readonly _legacyOnDecode?: (result: string) => void;\n    private readonly _legacyCanvasSize: number = QrScanner.DEFAULT_CANVAS_SIZE;\n    private _preferredCamera: QrScanner.FacingMode | QrScanner.DeviceId = 'environment';\n    private readonly _maxScansPerSecond: number = 25;\n    private _lastScanTimestamp: number = -1;\n    private _scanRegion: QrScanner.ScanRegion;\n    private _codeOutlineHighlightRemovalTimeout?: number;\n    private _qrEnginePromise: Promise<Worker | BarcodeDetector>\n    private _active: boolean = false;\n    private _paused: boolean = false;\n    private _flashOn: boolean = false;\n    private _destroyed: boolean = false;\n\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: QrScanner.ScanResult) => void,\n        options: {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        canvasSize?: number,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(video: HTMLVideoElement, onDecode: (result: string) => void, canvasSize?: number);\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: ((result: QrScanner.ScanResult) => void) | ((result: string) => void),\n        canvasSizeOrOnDecodeErrorOrOptions?: number | ((error: Error | string) => void) | {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n        canvasSizeOrCalculateScanRegion?: number | ((video: HTMLVideoElement) => QrScanner.ScanRegion),\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n\n        if (canvasSizeOrOnDecodeErrorOrOptions && typeof canvasSizeOrOnDecodeErrorOrOptions === 'object') {\n            // we got an options object using the new api\n            this._onDecode = onDecode as QrScanner['_onDecode'];\n        } else {\n            if (canvasSizeOrOnDecodeErrorOrOptions || canvasSizeOrCalculateScanRegion || preferredCamera) {\n                console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                    + 'the future');\n            } else {\n                // Only video and onDecode were specified and we can't distinguish between new or old api usage. For\n                // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n                // optional in the parameter list above to make clear that ScanResult instead of string is only passed\n                // if an options object was provided. However, in the future once legacy support is removed, the options\n                // object should become optional.\n                console.warn('Note that the type of the scan result passed to onDecode will change in the future. '\n                    + 'To already switch to the new api today, you can pass returnDetailedScanResult: true.');\n            }\n            this._legacyOnDecode = onDecode as QrScanner['_legacyOnDecode'];\n        }\n\n        const options = typeof canvasSizeOrOnDecodeErrorOrOptions === 'object'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : {};\n        this._onDecodeError = options.onDecodeError || (typeof canvasSizeOrOnDecodeErrorOrOptions === 'function'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : this._onDecodeError);\n        this._calculateScanRegion = options.calculateScanRegion || (typeof canvasSizeOrCalculateScanRegion==='function'\n            ? canvasSizeOrCalculateScanRegion\n            : this._calculateScanRegion);\n        this._preferredCamera = options.preferredCamera || preferredCamera || this._preferredCamera;\n        this._legacyCanvasSize = typeof canvasSizeOrOnDecodeErrorOrOptions === 'number'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : typeof canvasSizeOrCalculateScanRegion === 'number'\n                ? canvasSizeOrCalculateScanRegion\n                : this._legacyCanvasSize;\n        this._maxScansPerSecond = options.maxScansPerSecond || this._maxScansPerSecond;\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        this._updateOverlay = this._updateOverlay.bind(this);\n\n        // @ts-ignore\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        // @ts-ignore\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        const videoContainer = video.parentElement!;\n\n        if (options.highlightScanRegion || options.highlightCodeOutline) {\n            const gotExternalOverlay = !!options.overlay;\n            this.$overlay = options.overlay || document.createElement('div');\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.position = 'absolute';\n            overlayStyle.display = 'none';\n            overlayStyle.pointerEvents = 'none';\n            this.$overlay.classList.add('scan-region-highlight');\n            if (!gotExternalOverlay && options.highlightScanRegion) {\n                // default style; can be overwritten via css, e.g. by changing the svg's stroke color, hiding the\n                // .scan-region-highlight-svg, setting a border, outline, background, etc.\n                this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" '\n                    + 'preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;'\n                    + 'fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\">'\n                    + '<path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 '\n                    + '0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n                try {\n                    this.$overlay.firstElementChild!.animate({ transform: ['scale(.98)', 'scale(1.01)'] }, {\n                        duration: 400,\n                        iterations: Infinity,\n                        direction: 'alternate',\n                        easing: 'ease-in-out',\n                    });\n                } catch (e) {}\n                videoContainer.insertBefore(this.$overlay, this.$video.nextSibling);\n            }\n            if (options.highlightCodeOutline) {\n                // default style; can be overwritten via css\n                this.$overlay.insertAdjacentHTML(\n                    'beforeend',\n                    '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;'\n                        + 'height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;'\n                        + 'stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>',\n                );\n                this.$codeOutlineHighlight = this.$overlay.lastElementChild as SVGSVGElement;\n            }\n        }\n        this._scanRegion = this._calculateScanRegion(video);\n\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const videoStyle = window.getComputedStyle(video);\n            if (videoStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (videoStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = '0';\n                video.style.width = '0';\n                video.style.height = '0';\n                if (this.$overlay && this.$overlay.parentElement) {\n                    this.$overlay.parentElement.removeChild(this.$overlay);\n                }\n                // @ts-ignore\n                delete this.$overlay!;\n                // @ts-ignore\n                delete this.$codeOutlineHighlight!;\n            }\n\n            if (this.$overlay) {\n                this._updateOverlay();\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n        window.addEventListener('resize', this._updateOverlay);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    async hasFlash(): Promise<boolean> {\n        let stream: MediaStream | undefined;\n        try {\n            if (this.$video.srcObject) {\n                if (!(this.$video.srcObject instanceof MediaStream)) return false; // srcObject is not a camera stream\n                stream = this.$video.srcObject;\n            } else {\n                stream = (await this._getCameraStream()).stream;\n            }\n            return 'torch' in stream.getVideoTracks()[0].getSettings();\n        } catch (e) {\n            return false;\n        } finally {\n            // close the stream we just opened for detecting whether it supports flash\n            if (stream && stream !== this.$video.srcObject) {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(stream);\n            }\n        }\n    }\n\n    isFlashOn(): boolean {\n        return this._flashOn;\n    }\n\n    async toggleFlash(): Promise<void> {\n        if (this._flashOn) {\n            await this.turnFlashOff();\n        } else {\n            await this.turnFlashOn();\n        }\n    }\n\n    async turnFlashOn(): Promise<void> {\n        if (this._flashOn || this._destroyed) return;\n        this._flashOn = true;\n        if (!this._active || this._paused) return; // flash will be turned on later on .start()\n        try {\n            if (!await this.hasFlash()) throw 'No flash available';\n            // Note that the video track is guaranteed to exist and to be a MediaStream due to the check in hasFlash\n            await (this.$video.srcObject as MediaStream).getVideoTracks()[0].applyConstraints({\n                // @ts-ignore: constraint 'torch' is unknown to ts\n                advanced: [{ torch: true }],\n            });\n        } catch (e) {\n            this._flashOn = false;\n            throw e;\n        }\n    }\n\n    async turnFlashOff(): Promise<void> {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        await this._restartVideoStream();\n    }\n\n    destroy(): void {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n        window.removeEventListener('resize', this._updateOverlay);\n\n        this._destroyed = true;\n        this._flashOn = false;\n        this.stop(); // sets this._paused = true and this._active = false\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    async start(): Promise<void> {\n        if (this._destroyed) throw new Error('The QR scanner can not be started as it had been destroyed.');\n        if (this._active && !this._paused) return;\n\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n\n        this._active = true;\n        if (document.hidden) return; // camera will be started as soon as tab is in foreground\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            await this.$video.play();\n            return;\n        }\n\n        try {\n            const { stream, facingMode } = await this._getCameraStream();\n            if (!this._active || this._paused) {\n                // was stopped in the meantime\n                QrScanner._stopVideoStream(stream);\n                return;\n            }\n            this._setVideoMirror(facingMode);\n            this.$video.srcObject = stream;\n            await this.$video.play();\n\n            // Restart the flash if it was previously on\n            if (this._flashOn) {\n                this._flashOn = false; // force turnFlashOn to restart the flash\n                this.turnFlashOn().catch(() => {});\n            }\n        } catch (e) {\n            if (this._paused) return;\n            this._active = false;\n            throw e;\n        }\n    }\n\n    stop(): void {\n        this.pause();\n        this._active = false;\n    }\n\n    async pause(stopStreamImmediately = false): Promise<boolean> {\n        this._paused = true;\n        if (!this._active) return true;\n        this.$video.pause();\n\n        if (this.$overlay) {\n            this.$overlay.style.display = 'none';\n        }\n\n        const stopStream = () => {\n            if (this.$video.srcObject instanceof MediaStream) {\n                // revoke srcObject only if it's a stream which was likely set by us\n                QrScanner._stopVideoStream(this.$video.srcObject);\n                this.$video.srcObject = null;\n            }\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return true;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        if (!this._paused) return false;\n        stopStream();\n        return true;\n    }\n\n    async setCamera(facingModeOrDeviceId: QrScanner.FacingMode | QrScanner.DeviceId): Promise<void> {\n        if (facingModeOrDeviceId === this._preferredCamera) return;\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        await this._restartVideoStream();\n    }\n\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        options: {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    ): Promise<QrScanner.ScanResult>;\n    /** @deprecated */\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegion?: QrScanner.ScanRegion | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing?: boolean,\n        alsoTryWithoutScanRegion?: boolean,\n    ): Promise<string>;\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegionOrOptions?: QrScanner.ScanRegion | {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        } | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing: boolean = false,\n        alsoTryWithoutScanRegion: boolean = false,\n    ): Promise<string | QrScanner.ScanResult> {\n        let scanRegion: QrScanner.ScanRegion | null | undefined;\n        let returnDetailedScanResult = false;\n        if (scanRegionOrOptions && (\n            'scanRegion' in scanRegionOrOptions\n            || 'qrEngine' in scanRegionOrOptions\n            || 'canvas' in scanRegionOrOptions\n            || 'disallowCanvasResizing' in scanRegionOrOptions\n            || 'alsoTryWithoutScanRegion' in scanRegionOrOptions\n            || 'returnDetailedScanResult' in scanRegionOrOptions\n        )) {\n            // we got an options object using the new api\n            scanRegion = scanRegionOrOptions.scanRegion;\n            qrEngine = scanRegionOrOptions.qrEngine;\n            canvas = scanRegionOrOptions.canvas;\n            disallowCanvasResizing = scanRegionOrOptions.disallowCanvasResizing || false;\n            alsoTryWithoutScanRegion = scanRegionOrOptions.alsoTryWithoutScanRegion || false;\n            returnDetailedScanResult = true;\n        } else if (scanRegionOrOptions || qrEngine || canvas || disallowCanvasResizing || alsoTryWithoutScanRegion) {\n            console.warn('You\\'re using a deprecated api for scanImage which will be removed in the future.');\n        } else {\n            // Only imageOrFileOrBlobOrUrl was specified and we can't distinguish between new or old api usage. For\n            // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n            // optional in the parameter list above to make clear that ScanResult instead of string is only returned if\n            // an options object was provided. However, in the future once legacy support is removed, the options object\n            // should become optional.\n            console.warn('Note that the return type of scanImage will change in the future. To already switch to the '\n                + 'new api today, you can pass returnDetailedScanResult: true.');\n        }\n\n        const gotExternalEngine = !!qrEngine;\n\n        try {\n            let image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n                | SVGImageElement;\n            let canvasContext: CanvasRenderingContext2D;\n            [qrEngine, image] = await Promise.all([\n                qrEngine || QrScanner.createQrEngine(),\n                QrScanner._loadImage(imageOrFileOrBlobOrUrl),\n            ]);\n            [canvas, canvasContext] = QrScanner._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n            let detailedScanResult: QrScanner.ScanResult;\n\n            if (qrEngine instanceof Worker) {\n                const qrEngineWorker = qrEngine; // for ts to know that it's still a worker later in the event listeners\n                if (!gotExternalEngine) {\n                    // Enable scanning of inverted color qr codes.\n                    QrScanner._postWorkerMessageSync(qrEngineWorker, 'inversionMode', 'both');\n                }\n                detailedScanResult = await new Promise((resolve, reject) => {\n                    let timeout: number;\n                    let onMessage: (event: MessageEvent) => void;\n                    let onError: (error: ErrorEvent | string) => void;\n                    let expectedResponseId = -1;\n                    onMessage = (event: MessageEvent) => {\n                        if (event.data.id !== expectedResponseId) {\n                            return;\n                        }\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve({\n                                data: event.data.data,\n                                cornerPoints: QrScanner._convertPoints(event.data.cornerPoints, scanRegion),\n                            });\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (error: ErrorEvent | string) => {\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !error ? 'Unknown Error' : ((error as ErrorEvent).message || error);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngineWorker.addEventListener('message', onMessage);\n                    qrEngineWorker.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas!.width, canvas!.height);\n                    expectedResponseId = QrScanner._postWorkerMessageSync(\n                        qrEngineWorker,\n                        'decode',\n                        imageData,\n                        [imageData.data.buffer],\n                    );\n                });\n            } else {\n                detailedScanResult = await Promise.race([\n                    new Promise<QrScanner.ScanResult>((resolve, reject) => window.setTimeout(\n                        () => reject('Scanner error: timeout'),\n                        10000,\n                    )),\n                    (async (): Promise<QrScanner.ScanResult> => {\n                        try {\n                            const [scanResult] = await qrEngine.detect(canvas!);\n                            if (!scanResult) throw QrScanner.NO_QR_CODE_FOUND;\n                            return {\n                                data: scanResult.rawValue,\n                                cornerPoints: QrScanner._convertPoints(scanResult.cornerPoints, scanRegion),\n                            };\n                        } catch (e) {\n                            const errorMessage = (e as Error).message || e as string;\n                            if (/not implemented|service unavailable/.test(errorMessage)) {\n                                // Not implemented can apparently for some reason happen even though getSupportedFormats\n                                // in createQrScanner reported that it's supported, see issue #98.\n                                // Service unavailable can happen after some time when the BarcodeDetector crashed and\n                                // can theoretically be recovered from by creating a new BarcodeDetector. However, in\n                                // newer browsers this issue does not seem to be present anymore and therefore we do not\n                                // apply this optimization anymore but just set _disableBarcodeDetector in both cases.\n                                // Also note that if we got an external qrEngine that crashed, we should possibly notify\n                                // the caller about it, but we also don't do this here, as it's such an unlikely case.\n                                QrScanner._disableBarcodeDetector = true;\n                                // retry without passing the broken BarcodeScanner instance\n                                return QrScanner.scanImage(imageOrFileOrBlobOrUrl, {\n                                    scanRegion,\n                                    canvas,\n                                    disallowCanvasResizing,\n                                    alsoTryWithoutScanRegion,\n                                });\n                            }\n                            throw `Scanner error: ${errorMessage}`;\n                        }\n                    })(),\n                ]);\n            }\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } catch (e) {\n            if (!scanRegion || !alsoTryWithoutScanRegion) throw e;\n            const detailedScanResult = await QrScanner.scanImage(\n                imageOrFileOrBlobOrUrl,\n                { qrEngine, canvas, disallowCanvasResizing },\n            );\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } finally {\n            if (!gotExternalEngine) {\n                QrScanner._postWorkerMessage(qrEngine!, 'close');\n            }\n        }\n    }\n\n    setGrayscaleWeights(red: number, green: number, blue: number, useIntegerApproximation: boolean = true): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations work also well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode: QrScanner.InversionMode): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations scan normal and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    static async createQrEngine(): Promise<Worker | BarcodeDetector>;\n    /** @deprecated */\n    static async createQrEngine(workerPath: string): Promise<Worker | BarcodeDetector>;\n    static async createQrEngine(workerPath?: string): Promise<Worker | BarcodeDetector> {\n        if (workerPath) {\n            console.warn('Specifying a worker path is not required and not supported anymore.');\n        }\n\n        // @ts-ignore no types defined for import\n        const createWorker = () => (import('./qr-scanner-worker.min.js') as Promise<{ createWorker: () => Worker }>)\n            .then((module) => module.createWorker());\n\n        const useBarcodeDetector = !QrScanner._disableBarcodeDetector\n            && 'BarcodeDetector' in window\n            && BarcodeDetector.getSupportedFormats\n            && (await BarcodeDetector.getSupportedFormats()).includes('qr_code');\n\n        if (!useBarcodeDetector) return createWorker();\n\n        // On Macs with an M1/M2 processor and macOS Ventura (macOS version 13), the BarcodeDetector is broken in\n        // Chromium based browsers, regardless of the version. For that constellation, the BarcodeDetector does not\n        // error but does not detect QR codes. Macs without an M1/M2 or before Ventura are fine.\n        // See issue #209 and https://bugs.chromium.org/p/chromium/issues/detail?id=1382442\n        // TODO update this once the issue in macOS is fixed\n        const userAgentData = navigator.userAgentData;\n        const isChromiumOnMacWithArmVentura = userAgentData // all Chromium browsers support userAgentData\n            && userAgentData.brands.some(({ brand }) => /Chromium/i.test(brand))\n            && /mac ?OS/i.test(userAgentData.platform)\n            // Does it have an ARM chip (e.g. M1/M2) and Ventura? Check this last as getHighEntropyValues can\n            // theoretically trigger a browser prompt, although no browser currently does seem to show one.\n            // If browser or user refused to return the requested values, assume broken ARM Ventura, to be safe.\n            && await userAgentData.getHighEntropyValues(['architecture', 'platformVersion'])\n                .then(({ architecture, platformVersion }) =>\n                    /arm/i.test(architecture || 'arm') && parseInt(platformVersion || '13') >= /* Ventura */ 13)\n                .catch(() => true);\n        if (isChromiumOnMacWithArmVentura) return createWorker();\n\n        return new BarcodeDetector({ formats: ['qr_code'] });\n    }\n\n    private _onPlay(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n        if (this.$overlay) {\n            this.$overlay.style.display = '';\n        }\n        this._scanFrame();\n    }\n\n    private _onLoadedMetaData(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n    }\n\n    private _onVisibilityChange(): void {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    private _calculateScanRegion(video: HTMLVideoElement): QrScanner.ScanRegion {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    private _updateOverlay(): void {\n        requestAnimationFrame(() => {\n            // Running in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle\n            // and offsetWidth, offsetHeight, offsetLeft, offsetTop.\n            if (!this.$overlay) return;\n            const video = this.$video;\n            const videoWidth = video.videoWidth;\n            const videoHeight = video.videoHeight;\n            const elementWidth = video.offsetWidth;\n            const elementHeight = video.offsetHeight;\n            const elementX = video.offsetLeft;\n            const elementY = video.offsetTop;\n\n            const videoStyle = window.getComputedStyle(video);\n            const videoObjectFit = videoStyle.objectFit;\n            const videoAspectRatio = videoWidth / videoHeight;\n            const elementAspectRatio = elementWidth / elementHeight;\n            let videoScaledWidth: number;\n            let videoScaledHeight: number;\n            switch (videoObjectFit) {\n                case 'none':\n                    videoScaledWidth = videoWidth;\n                    videoScaledHeight = videoHeight;\n                    break;\n                case 'fill':\n                    videoScaledWidth = elementWidth;\n                    videoScaledHeight = elementHeight;\n                    break;\n                default: // 'cover', 'contains', 'scale-down'\n                    if (videoObjectFit === 'cover'\n                        ? videoAspectRatio > elementAspectRatio\n                        : videoAspectRatio < elementAspectRatio) {\n                        // The scaled height is the element height\n                        // - for 'cover' if the video aspect ratio is wider than the element aspect ratio\n                        //   (scaled height matches element height and scaled width overflows element width)\n                        // - for 'contains'/'scale-down' if element aspect ratio is wider than the video aspect ratio\n                        //   (scaled height matched element height and element width overflows scaled width)\n                        videoScaledHeight = elementHeight;\n                        videoScaledWidth = videoScaledHeight * videoAspectRatio;\n                    } else {\n                        videoScaledWidth = elementWidth;\n                        videoScaledHeight = videoScaledWidth / videoAspectRatio;\n                    }\n                    if (videoObjectFit === 'scale-down') {\n                        // for 'scale-down' the dimensions are the minimum of 'contains' and 'none'\n                        videoScaledWidth = Math.min(videoScaledWidth, videoWidth);\n                        videoScaledHeight = Math.min(videoScaledHeight, videoHeight);\n                    }\n            }\n\n            // getComputedStyle is so nice to convert keywords (left, center, right, top, bottom) to percent and makes\n            // sure to set the default of 50% if only one or no component was provided, therefore we can be sure that\n            // both components are set. Additionally, it converts units other than px (e.g. rem) to px.\n            const [videoX, videoY] = videoStyle.objectPosition.split(' ').map((length, i) => {\n                const lengthValue = parseFloat(length);\n                return length.endsWith('%')\n                    ? (!i ? elementWidth - videoScaledWidth : elementHeight - videoScaledHeight) * lengthValue / 100\n                    : lengthValue;\n            });\n\n            const regionWidth = this._scanRegion.width || videoWidth;\n            const regionHeight = this._scanRegion.height || videoHeight;\n            const regionX = this._scanRegion.x || 0;\n            const regionY = this._scanRegion.y || 0;\n\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.width = `${regionWidth / videoWidth * videoScaledWidth}px`;\n            overlayStyle.height = `${regionHeight / videoHeight * videoScaledHeight}px`;\n            overlayStyle.top = `${elementY + videoY + regionY / videoHeight * videoScaledHeight}px`;\n            const isVideoMirrored = /scaleX\\(-1\\)/.test(video.style.transform!);\n            overlayStyle.left = `${elementX\n                + (isVideoMirrored ? elementWidth - videoX - videoScaledWidth : videoX)\n                + (isVideoMirrored ? videoWidth - regionX - regionWidth : regionX) / videoWidth * videoScaledWidth}px`;\n            // apply same mirror as on video\n            overlayStyle.transform = video.style.transform;\n        });\n    }\n\n    private static _convertPoints(\n        points: QrScanner.Point[],\n        scanRegion?: QrScanner.ScanRegion | null,\n    ): QrScanner.Point[] {\n        if (!scanRegion) return points;\n        const offsetX = scanRegion.x || 0;\n        const offsetY = scanRegion.y || 0;\n        const scaleFactorX = scanRegion.width && scanRegion.downScaledWidth\n            ? scanRegion.width / scanRegion.downScaledWidth\n            : 1;\n        const scaleFactorY = scanRegion.height && scanRegion.downScaledHeight\n            ? scanRegion.height / scanRegion.downScaledHeight\n            : 1;\n        for (const point of points) {\n            point.x = point.x * scaleFactorX + offsetX;\n            point.y = point.y * scaleFactorY + offsetY;\n        }\n        return points;\n    }\n\n    private _scanFrame(): void {\n        if (!this._active || this.$video.paused || this.$video.ended) return;\n        // If requestVideoFrameCallback is available use that to avoid unnecessary scans on the same frame as the\n        // camera's framerate can be lower than the screen refresh rate and this._maxScansPerSecond, especially in dark\n        // settings where the exposure time is longer. Both, requestVideoFrameCallback and requestAnimationFrame are not\n        // being fired if the tab is in the background, which is what we want.\n        const requestFrame = 'requestVideoFrameCallback' in this.$video\n            // @ts-ignore\n            ? this.$video.requestVideoFrameCallback.bind(this.$video)\n            : requestAnimationFrame;\n        requestFrame(async () => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n\n            const timeSinceLastScan = Date.now() - this._lastScanTimestamp;\n            const minimumTimeBetweenScans = 1000 / this._maxScansPerSecond;\n            if (timeSinceLastScan < minimumTimeBetweenScans) {\n                await new Promise((resolve) => setTimeout(resolve, minimumTimeBetweenScans - timeSinceLastScan));\n            }\n            // console.log('Scan rate:', Math.round(1000 / (Date.now() - this._lastScanTimestamp)));\n            this._lastScanTimestamp = Date.now();\n\n            let result: QrScanner.ScanResult | undefined;\n            try {\n                result = await QrScanner.scanImage(this.$video, {\n                    scanRegion: this._scanRegion,\n                    qrEngine: this._qrEnginePromise,\n                    canvas: this.$canvas,\n                });\n            } catch (error) {\n                if (!this._active) return;\n                this._onDecodeError(error as Error | string);\n            }\n\n            if (QrScanner._disableBarcodeDetector && !(await this._qrEnginePromise instanceof Worker)) {\n                // replace the disabled BarcodeDetector\n                this._qrEnginePromise = QrScanner.createQrEngine();\n            }\n\n            if (result) {\n                if (this._onDecode) {\n                    this._onDecode(result);\n                } else if (this._legacyOnDecode) {\n                    this._legacyOnDecode(result.data);\n                }\n\n                if (this.$codeOutlineHighlight) {\n                    clearTimeout(this._codeOutlineHighlightRemovalTimeout);\n                    this._codeOutlineHighlightRemovalTimeout = undefined;\n                    this.$codeOutlineHighlight.setAttribute(\n                        'viewBox',\n                        `${this._scanRegion.x || 0} `\n                            + `${this._scanRegion.y || 0} `\n                            + `${this._scanRegion.width || this.$video.videoWidth} `\n                            + `${this._scanRegion.height || this.$video.videoHeight}`,\n                    );\n                    const polygon = this.$codeOutlineHighlight.firstElementChild!;\n                    polygon.setAttribute('points', result.cornerPoints.map(({x, y}) => `${x},${y}`).join(' '));\n                    this.$codeOutlineHighlight.style.display = '';\n                }\n            } else if (this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout) {\n                // hide after timeout to make it flash less when on some frames the QR code is detected and on some not\n                this._codeOutlineHighlightRemovalTimeout = setTimeout(\n                    () => this.$codeOutlineHighlight!.style.display = 'none',\n                    100,\n                );\n            }\n\n            this._scanFrame();\n        });\n    }\n\n    private _onDecodeError(error: Error | string): void {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    private async _getCameraStream(): Promise<{ stream: MediaStream, facingMode: QrScanner.FacingMode }> {\n        if (!navigator.mediaDevices) throw 'Camera not found.';\n\n        const preferenceType = /^(environment|user)$/.test(this._preferredCamera)\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera: Array<MediaTrackConstraints> = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        for (const constraints of [...constraintsWithCamera, ...constraintsWithoutCamera]) {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: constraints, audio: false });\n                // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                // mode, even for exact facingMode constraints.\n                const facingMode = this._getFacingMode(stream)\n                    || (constraints.facingMode\n                        ? this._preferredCamera as QrScanner.FacingMode // a facing mode we were able to fulfill\n                        : (this._preferredCamera === 'environment'\n                            ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                            : 'environment' // switch from unfulfilled user facingMode or default to environment\n                        )\n                    );\n                return { stream, facingMode };\n            } catch (e) {}\n        }\n\n        throw 'Camera not found.';\n    }\n\n    private async _restartVideoStream(): Promise<void> {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        const paused = await this.pause(true);\n        if (!paused || wasPaused || !this._active) return;\n        await this.start();\n    }\n\n    private static _stopVideoStream(stream : MediaStream): void {\n        for (const track of stream.getTracks()) {\n            track.stop(); //  note that this will also automatically turn the flashlight off\n            stream.removeTrack(track);\n        }\n    }\n\n    private _setVideoMirror(facingMode: QrScanner.FacingMode): void {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode === 'user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    private _getFacingMode(videoStream: MediaStream): QrScanner.FacingMode | null {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    private static _drawToCanvas(\n        image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement,\n        scanRegion?: QrScanner.ScanRegion | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing= false,\n    ): [HTMLCanvasElement, CanvasRenderingContext2D] {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width\n            ? scanRegion.width\n            : (image as HTMLVideoElement).videoWidth || image.width as number;\n        const scanRegionHeight = scanRegion && scanRegion.height\n            ? scanRegion.height\n            : (image as HTMLVideoElement).videoHeight || image.height as number;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false })!;\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height,\n        );\n        return [canvas, context];\n    }\n\n    private static async _loadImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n    ): Promise<HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n        | SVGImageElement > {\n        if (imageOrFileOrBlobOrUrl instanceof Image) {\n            await QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl);\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement\n            || imageOrFileOrBlobOrUrl instanceof SVGImageElement\n            || 'OffscreenCanvas' in window && imageOrFileOrBlobOrUrl instanceof OffscreenCanvas\n            || 'ImageBitmap' in window && imageOrFileOrBlobOrUrl instanceof ImageBitmap) {\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl.toString();\n            }\n            try {\n                await QrScanner._awaitImageLoad(image);\n                return image;\n            } finally {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n            }\n        } else {\n            throw 'Unsupported image type.';\n        }\n    }\n\n    private static async _awaitImageLoad(image: HTMLImageElement): Promise<void> {\n        if (image.complete && image.naturalWidth !== 0) return; // already loaded\n        await new Promise<void>((resolve, reject) => {\n            const listener = (event: ErrorEvent | Event) => {\n                image.removeEventListener('load', listener);\n                image.removeEventListener('error', listener);\n                if (event instanceof ErrorEvent) {\n                    reject('Image load error');\n                } else {\n                    resolve();\n                }\n            };\n            image.addEventListener('load', listener);\n            image.addEventListener('error', listener);\n        });\n    }\n\n    private static async _postWorkerMessage(\n        qrEngineOrQrEnginePromise: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector>,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): Promise<number> {\n        return QrScanner._postWorkerMessageSync(await qrEngineOrQrEnginePromise, type, data, transfer);\n    }\n\n    // sync version of _postWorkerMessage without performance overhead of async functions\n    private static _postWorkerMessageSync(\n        qrEngine: Worker | BarcodeDetector,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): number {\n        if (!(qrEngine instanceof Worker)) return -1;\n        const id = QrScanner._workerMessageId++;\n        qrEngine.postMessage({\n            id,\n            type,\n            data,\n        }, transfer);\n        return id;\n    }\n}\n\ndeclare namespace QrScanner {\n    export interface ScanRegion {\n        x?: number;\n        y?: number;\n        width?: number;\n        height?: number;\n        downScaledWidth?: number;\n        downScaledHeight?: number;\n    }\n\n    export type FacingMode = 'environment' | 'user';\n    export type DeviceId = string;\n\n    export interface Camera {\n        id: DeviceId;\n        label: string;\n    }\n\n    export type InversionMode = 'original' | 'invert' | 'both';\n\n    export interface Point {\n        x: number;\n        y: number;\n    }\n\n    export interface ScanResult {\n        data: string;\n        // In clockwise order, starting at top left, but this might not be guaranteed in the future.\n        cornerPoints: QrScanner.Point[];\n    }\n}\n\n// simplified from https://wicg.github.io/shape-detection-api/#barcode-detection-api\ndeclare class BarcodeDetector {\n    constructor(options?: { formats: string[] });\n    static getSupportedFormats(): Promise<string[]>;\n    detect(image: ImageBitmapSource): Promise<Array<{ rawValue: string, cornerPoints: QrScanner.Point[] }>>;\n}\n\n// simplified from https://github.com/lukewarlow/user-agent-data-types/blob/master/index.d.ts\ndeclare global {\n    interface Navigator {\n        readonly userAgentData?: {\n            readonly platform: string;\n            readonly brands: Array<{\n                readonly brand: string;\n                readonly version: string;\n            }>;\n            getHighEntropyValues(hints: string[]): Promise<{\n                readonly architecture?: string;\n                readonly platformVersion?: string;\n            }>;\n        };\n    }\n}\n\nexport default QrScanner;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}